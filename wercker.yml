# This references a standard debian container from the
# Docker Hub https://registry.hub.docker.com/_/debian/
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: debian
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - script:
        name: echo
        code: |
          echo "hello world!"

deploy:
  steps:
    - script:
      name: install ssh and rsync
      code: |
        apt-get update
        apt-get install -y ssh
        apt-get install -y rsync
    - script:
      name: make .ssh directory
      code: mkdir -p "$HOME/.ssh"
    - create-file:
      name: write ssh key
      filename: $HOME/.ssh/id_rsa
      overwrite: true
      hide-from-log: true
      content: $WERCKER_PEM_KEY
    - script:
      name: set permissions for ssh key
      code: chmod 0400 $HOME/.ssh/id_rsa
    - script:
      name: connect ec2
      code: ssh -i $HOME/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null centos@$EC2_IP
    - create-file:
      name: create dummy file
      filename: $HOME/dummy.txt
      overwrite: true
      hide-from-log: true
      content: "hogehoge"
    - script:
      name: rsync ec2
      code: |
        rsync -avzr -e "ssh -i $HOME/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" $HOME/dummy.txt centos@$EC2_IP:~/
